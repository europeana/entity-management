<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <modules>
        <module>entity-management-definitions</module>
        <module>entity-management-common</module>
        <module>entity-management-web</module>
        <module>entity-management-mongo</module>
        <module>entity-management-enrichment</module>
    <module>entity-management-solr</module>
     <module>entity-management-zoho</module>
  </modules>

    <parent>
        <groupId>eu.europeana</groupId>
        <artifactId>europeana-parent-pom</artifactId>
        <version>2.2</version>
    </parent>
    
    <repositories>
		<repository>
			<id>libs-release-local</id>
			<name>europeana-releases</name>
			<url>https://artifactory.eanadev.org/artifactory/libs-release</url>
		</repository>
		<repository>
			<id>libs-snapshots-local</id>
			<name>europeana-snapshots</name>
			<url>https://artifactory.eanadev.org/artifactory/libs-snapshot</url>
		</repository>
	</repositories>
    

    <groupId>eu.europeana.api</groupId>
    <artifactId>entity-management</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>Entity Management</name>
    <description>Parent module for the Entity Management API</description>

    <properties>
        <java.version>11</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <api.commons.version>0.3.11</api.commons.version>
        <springbatch.mongo.version>1.0.3</springbatch.mongo.version>
        <corelib.version>2.14.1-SNAPSHOT</corelib.version>
        <jackson.version>2.11.4</jackson.version>
        <spring-boot.version>2.5.5</spring-boot.version>
        <swagger.version>3.0.0</swagger.version>
        <morphia.version>2.1.4</morphia.version>
        <mock-webserver.version>4.9.0</mock-webserver.version>
        <testcontainers.version>1.16.0</testcontainers.version>
        <metis.version>4.1</metis.version>
        <solrj.version>7.7.2</solrj.version>
        <apache.commons.validator.version>1.7</apache.commons.validator.version>
		    <zoho-sdk.version>3.0.1</zoho-sdk.version>
		    <jaxb.version>2.3.3</jaxb.version>
		    <saxon-he.version>10.5</saxon-he.version>
        <git-code-format.version>3.1</git-code-format.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <!-- Import dependency management from Spring Boot (because we don't use Spring-Boot as parent pom)-->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.testcontainers</groupId>
                <artifactId>testcontainers</artifactId>
                <version>${testcontainers.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.testcontainers</groupId>
                <artifactId>junit-jupiter</artifactId>
                <version>${testcontainers.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>com.squareup.okhttp3</groupId>
                <artifactId>okhttp</artifactId>
                <version>${mock-webserver.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>com.squareup.okhttp3</groupId>
                <artifactId>mockwebserver</artifactId>
                <version>${mock-webserver.version}</version>
                <scope>test</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>

      <build>
          <!--  allow Maven to manipulate resource files as a part of the build process.
                 build.properties by default is expanded by spring-boot-maven-plugin
          -->
          <resources>
              <resource>
                  <directory>src/main/resources</directory>
                  <filtering>true</filtering>
              </resource>
          </resources>
          <plugins>
              <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-failsafe-plugin</artifactId>
                  <version>3.0.0-M5</version>
                  <executions>
                      <execution>
                          <goals>
                              <goal>integration-test</goal>
                              <goal>verify</goal>
                          </goals>
                      </execution>
                  </executions>
              </plugin>
              <plugin>
                  <groupId>org.codehaus.mojo</groupId>
                  <artifactId>build-helper-maven-plugin</artifactId>
                  <version>3.0.0</version>
                  <executions>
                      <execution>
                          <id>add-integration-test-source</id>
                        <!-- Normally this would be attached to the generate-test-source phase,
                          however we attach to generate-sources so that the git-code-format plugin can pick
                          up integration test source files (see plugin config above) -->
                        <phase>generate-sources</phase>
                          <goals>
                              <goal>add-test-source</goal>
                          </goals>
                          <configuration>
                              <!-- Configures the source directory of our integration tests -->
                              <sources>
                                  <source>src/integration-test/java</source>
                              </sources>
                          </configuration>
                      </execution>
                      <execution>
                          <id>add-integration-test-resources</id>
                          <phase>generate-test-resources</phase>
                          <goals>
                              <goal>add-test-resource</goal>
                          </goals>
                          <configuration>
                              <!-- Configures the resource directory of our integration tests -->
                              <resources>
                                  <resource>
                                      <filtering>true</filtering>
                                      <directory>src/integration-test/resources</directory>
                                  </resource>
                              </resources>
                          </configuration>
                      </execution>
                  </executions>
              </plugin>
            <plugin>
              <groupId>com.cosium.code</groupId>
              <artifactId>git-code-format-maven-plugin</artifactId>
              <version>${git-code-format.version}</version>
              <executions>
                <!-- Install git pre-commit hook -->
                <execution>
                  <id>install-formatter-hook</id>
                  <goals>
                    <goal>install-hooks</goal>
                  </goals>
                </execution>
                <!-- Format source files -->
                <execution>
                  <id>format-code</id>
                  <phase>process-sources</phase>
                  <goals>
                    <goal>format-code</goal>
                  </goals>
                </execution>
                <!-- On Maven verify phase, fail if any file
                (including unmodified) is badly formatted -->
                <execution>
                  <id>validate-code-format</id>
                  <phase>verify</phase>
                  <goals>
                    <goal>validate-code-format</goal>
                  </goals>
                </execution>
              </executions>
            </plugin>
          </plugins>
          <pluginManagement>
				<plugins>
					<!--This plugin's configuration is used to store Eclipse m2e settings only. 
						It has no influence on the Maven build itself. -->
					<plugin>
						<groupId>org.eclipse.m2e</groupId>
						<artifactId>lifecycle-mapping</artifactId>
						<version>1.0.0</version>
						<configuration>
							<lifecycleMappingMetadata>
								<pluginExecutions>
									<pluginExecution>
										<pluginExecutionFilter>
											<groupId>com.cosium.code</groupId>
											<artifactId>git-code-format-maven-plugin</artifactId>
											<versionRange>${git-code-format.version}</versionRange>
											<goals>
												<goal>install-hooks</goal>
												<goal>format-code</goal>
												<goal>validate-code-format</goal>
											</goals>
										</pluginExecutionFilter>
										<action>
											<execute />
										</action>
									</pluginExecution>
								</pluginExecutions>
							</lifecycleMappingMetadata>
						</configuration>
					</plugin>
				</plugins>
    	</pluginManagement>
  </build>
</project>